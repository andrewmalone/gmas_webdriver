from pages.Page import Page
from pages.elements import Row
from pages.elements import RText, Radio, Select, Text, Checkbox
import utilities.xpath as xpath


class SCR0449(Page):
    """
    SCR_0449 View approval for IACUC
    """
    locators = {
        "generated date": "xpath=//span[contains(normalize-space(text()), 'Generation date')]/../following-sibling::td[2]",
        "due date": "css=select[name=dueDateEventId]",
        "status": "xpath=//select[@name='approvalStatusId']",
        "responsible party": "css=select[name=responsiblePartyId]",
        "approval number": "xpath=//input[@name='approvalNumber']",
        "date effective": "name=effectiveDate",
        "date expires": "name=expireDate",
        "documents" : "xpath=//*[contains(normalize-space(text()), 'Documents')]/../following-sibling::td[2]"
    }
    _locators = {
        "generated date": "xpath=//span[contains(normalize-space(text()), 'Generated date')]/../following-sibling::td[1]",
        "due date": "xpath=//span[contains(normalize-space(text()), 'Due event')]/../following-sibling::td[1]",
        "status": "xpath=//span[contains(normalize-space(text()), 'Status')]/../following-sibling::td[1]",
        "responsible party": "xpath=//span[contains(normalize-space(text()), 'Responsible party')]/../following-sibling::td[1]",
        "approval number": "xpath=//span[contains(normalize-space(text()), 'Approval/Assurance number')]/../following-sibling::td[1]",
        "date effective": "xpath=//span[contains(normalize-space(text()), 'Date effective')]/../following-sibling::td[1]",
        "date expires":  "xpath=//span[contains(normalize-space(text()), 'Date expires')]/../following-sibling::td[1]",
        "documents": "xpath=//div[@id='j_idt159_header']/ul/li",
        "generated by": "xpath=//table[@id='approvalGrid']/tbody/tr/td[2]",
        "generated date": "xpath=//span[contains(normalize-space(text()), 'Generated date')]/../following-sibling::td[1]",
        "due date": "xpath=//span[contains(normalize-space(text()), 'Due event')]/../following-sibling::td[1]",
        "status": "xpath=//span[contains(normalize-space(text()), 'Status')]/../following-sibling::td[1]"
    }
    
#     @classmethod
#     def url(cls, segment_id,):
#         """
#         Direct navigation to SCR_0015
#         """
#         url = " {{}}/gmas/dispatch?ref=%2Ftemplates%2Fcommon%2FsegmentNavigation.xhtml&segmentId={}&ApprovalListHomeEvent=&formName=SegmentHomeForm&fromSegmentHomePage=true"
#         return url.format(segment_id,)
    
    @classmethod
    def url(cls, segmentId, approval_requirement_id, segment_revision_id):
        """
        Direct navigation to SCR_0449
        """
        url = "{{}}/gmas/dispatch?segmentScopeRequestId=&ApprovalListViewOrEditDetailEvent=&responsiblePartyDisplayString=PI+%2F+Department&HUID=&approvalTypeId=2012&ref=%2Fapproval%2FSCR0080Approvals.xhtml&requestId=&formName=ApprovalListForm&segmentId={}&approvalId={}&segmentRevisionId={}&fromSegmentHomePage=true"
        return url.format(segmentId, approval_requirement_id, segment_revision_id)
   
   
    
    generated_date = RText("generated date", "Approval generated")
    due_date = RText("due date", "Approval due date")
    _status_text = RText("status","Approval status")
    _status_select = Select("status","Approval status")
    responsible_party = RText("responsible party", "Responsible party")
    approval_number = RText("approval number", "Approval/Assurance number")
    date_effective = RText("date effective", "Effective date")
    date_expires  = RText("date expires", "Expires date")
    documents = RText("documents", "Documents")
         
    @property
    def select(self):
        if self.mode == "old":
            return self.find_status_select
        if self.mode == "convert":
            return self.find_status_text
        
#         
    def edit(self):
        try:
            return self.go("edit").click()
        except:
            return self
        
        
    @property
    def documents(self):
        if self.mode == "old":
            text = self.find("documents").text
            return text[:1]
        if self.mode == "convert":
            text = self.find("documents").text
            return text[:1]
        